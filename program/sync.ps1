# PowerShell Git Sync Script mit automatischer Branch-Auswahl
$repoPath = ".\"  # Ã„ndere das zu deinem Repo-Pfad

# Wechsle in das Repository-Verzeichnis
Set-Location $repoPath

Write-Host "ðŸ”„ Starte Git-Sync fÃ¼r $repoPath" -ForegroundColor Green

# Fetch die neuesten Ã„nderungen
git fetch origin

# VerfÃ¼gbare Remote-Branches abrufen
$branches = git branch -r | ForEach-Object { $_ -replace 'origin/', '' } | Where-Object { $_ -notmatch "HEAD" }

# Entferne doppelte oder lokale Branches
$branches = $branches | Sort-Object -Unique

# PrÃ¼fe, wie viele Branches vorhanden sind
if ($branches.Count -eq 1) {
    $branch = $branches[0]
    Write-Host "âœ… Einziger Branch gefunden: $branch"
} else {
    # Benutzer auswÃ¤hlen lassen
    Write-Host "ðŸ“Œ VerfÃ¼gbare Branches:"
    for ($i = 0; $i -lt $branches.Count; $i++) {
        Write-Host "$($i+1): $($branches[$i])"
    }

    # Auswahl treffen
    $selection = Read-Host "Bitte wÃ¤hle eine Branch-Nummer"
    $branch = $branches[$selection - 1]
    Write-Host "âœ… GewÃ¤hlter Branch: $branch"
}

# Wechsle zum ausgewÃ¤hlten Branch
git checkout $branch

# Stash lokale Ã„nderungen (falls vorhanden)
git stash push -m "Auto-Stash vor Pull"

# Pull die neuesten Ã„nderungen
$pullOutput = git pull origin $branch 2>&1

# PrÃ¼fe auf Merge-Konflikte
if ($pullOutput -match "CONFLICT") {
    Write-Host "âš  Merge-Konflikt erkannt! Ã–ffne VS Code..." -ForegroundColor Yellow
    code .  # VS Code Ã¶ffnen
    git status
    exit
}

# Stash-Pop um lokale Ã„nderungen wiederherzustellen
git stash pop

# PrÃ¼fe auf neue Ã„nderungen, die committet werden mÃ¼ssen
$status = git status --porcelain
if ($status) {
    Write-Host "ðŸ“Œ Neue Ã„nderungen erkannt, committe und pushe..."
    git add .
    git commit -m "Auto-Sync Update"
    git push origin $branch
} else {
    Write-Host "âœ… Keine neuen Ã„nderungen, Repository ist aktuell!"
}

Write-Host "ðŸš€ Git-Sync abgeschlossen!" -ForegroundColor Green
